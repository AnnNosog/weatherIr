{"ast":null,"code":"import { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport { Forecast } from '../forecast';\nimport { CurrentWeather } from '../current-weather';\nimport { WeatherService } from '../weather.service';\nimport { MessageService } from '../message.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../weather.service\";\nimport * as i2 from \"../message.service\";\nimport * as i3 from \"../current/current.component\";\nimport * as i4 from \"../forecast-item/forecast-item.component\";\nfunction ForecastComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵelement(1, \"wa-forecast-item\", 10);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const day_r2 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"day\", day_r2);\n  }\n}\nfunction ForecastComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"a\", 11);\n    i0.ɵɵlistener(\"click\", function ForecastComponent_div_9_Template_a_click_1_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.sortTemp());\n    });\n    i0.ɵɵtext(2, \"Sort temp\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"a\", 11);\n    i0.ɵɵlistener(\"click\", function ForecastComponent_div_9_Template_a_click_3_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.sortDay());\n    });\n    i0.ɵɵtext(4, \"Sort days\");\n    i0.ɵɵelementEnd()();\n  }\n}\nexport let ForecastComponent = /*#__PURE__*/(() => {\n  class ForecastComponent {\n    constructor(ws, messageService) {\n      this.ws = ws;\n      this.messageService = messageService;\n      this.cityForecast = [];\n      this.city = '';\n      this.dirTemp = 'asc';\n      this.dirDays = 'desc';\n    }\n    sortTemp() {\n      if (this.dirTemp === 'asc') {\n        this.dirTemp = 'desc';\n        this.cityForecast.sort((a, b) => {\n          return parseInt(b.tempMax, 10) - parseInt(a.tempMax, 10);\n        });\n      } else {\n        this.dirTemp = 'asc';\n        this.cityForecast.sort((a, b) => {\n          return parseInt(a.tempMax, 10) - parseInt(b.tempMax, 10);\n        });\n      }\n    }\n    sortDay() {\n      this.cityForecast.sort((a, b) => {\n        const aDate = a.day.split(' ')[0].split('-');\n        const aDay = parseInt(aDate[2], 10);\n        const bDate = b.day.split(' ')[0].split('-');\n        const bDay = parseInt(bDate[2], 10);\n        if (this.dirDays === 'asc') {\n          return aDay - bDay;\n        } else {\n          return bDay - aDay;\n        }\n      });\n      if (this.dirDays === 'asc') {\n        this.dirDays = 'desc';\n      } else {\n        this.dirDays = 'asc';\n      }\n    }\n    ngOnInit() {\n      const city = this.cityDetect();\n      if (city !== '') {\n        this.city = city;\n        this.getApiData(city);\n      }\n    }\n    cityDetect() {\n      const loc = location.href.split('?');\n      const getCity = {\n        city: ''\n      };\n      if (loc.length > 1) {\n        const getParams = loc[1].split('&');\n        getParams.map(item => {\n          const [key, value] = item.split('=');\n          getCity[key] = value;\n        });\n      }\n      return getCity.city;\n    }\n    getApiData(city) {\n      if (city.length < 1) {\n        this.messageService.add('Please, input city name');\n        history.pushState(null, null, '/');\n        return false;\n      }\n      this.ws.getWeatherByCity(city).pipe(catchError(err => {\n        // console.log('Handling error getWeatherByCity locally and rethrowing it...', err);\n        this.ws.log('Not found. Please, check the city exist');\n        history.pushState(null, null, '/');\n        return throwError(err);\n      })).subscribe(data => {\n        this.myWeather = new CurrentWeather(data.name, data.main.temp, data.weather[0].icon, data.weather[0].description, data.main.temp_max, data.main.temp_min);\n        history.pushState(null, null, `?city=${data.name}`);\n        const reformatCity = this.cityDetect();\n        this.city = reformatCity;\n      });\n      this.ws.fiveDayForecast(city).pipe(catchError(err => {\n        // console.log('Handling error fiveDayForecast locally and rethrowing it...', err);\n        return throwError(err);\n      })).subscribe(data => {\n        data.list.filter((item, i) => {\n          if (i % 8 === 0) {\n            const temp = new Forecast(item.dt_txt, item.weather[0].icon, item.main.temp_max, item.main.temp_min);\n            this.cityForecast.push(temp);\n          }\n          return false;\n        });\n      });\n    }\n    onSubmit() {\n      this.cityForecast.splice(0, this.cityForecast.length);\n      this.myWeather = new CurrentWeather('', '', '', '', '', '');\n      this.messageService.clear();\n      this.getApiData(this.city);\n    }\n    static #_ = this.ɵfac = function ForecastComponent_Factory(t) {\n      return new (t || ForecastComponent)(i0.ɵɵdirectiveInject(i1.WeatherService), i0.ɵɵdirectiveInject(i2.MessageService));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ForecastComponent,\n      selectors: [[\"wa-forecast\"]],\n      decls: 10,\n      vars: 4,\n      consts: [[1, \"container\"], [1, \"forecast-form\", 3, \"ngSubmit\"], [\"type\", \"text\", \"name\", \"forecastCity\", \"placeholder\", \"Name of a city\", 1, \"forecast-form__input\", 3, \"ngModel\", \"ngModelChange\"], [\"name\", \"button\", 1, \"forecast-form__btn\"], [1, \"row\"], [1, \"col-sm-3\", 3, \"weather\"], [1, \"col-sm-9\", \"row\", \"forecast-items\"], [\"class\", \"col-sm forecast-item__wrap\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [1, \"col-sm\", \"forecast-item__wrap\"], [3, \"day\"], [1, \"sort-btn\", 3, \"click\"]],\n      template: function ForecastComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1);\n          i0.ɵɵlistener(\"ngSubmit\", function ForecastComponent_Template_form_ngSubmit_1_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(2, \"input\", 2);\n          i0.ɵɵlistener(\"ngModelChange\", function ForecastComponent_Template_input_ngModelChange_2_listener($event) {\n            return ctx.city = $event;\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(3, \"button\", 3);\n          i0.ɵɵtext(4, \"go\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(5, \"div\", 4);\n          i0.ɵɵelement(6, \"wa-current\", 5);\n          i0.ɵɵelementStart(7, \"div\", 6);\n          i0.ɵɵtemplate(8, ForecastComponent_div_8_Template, 2, 1, \"div\", 7);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵtemplate(9, ForecastComponent_div_9_Template, 5, 0, \"div\", 8);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngModel\", ctx.city);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"weather\", ctx.myWeather);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngForOf\", ctx.cityForecast);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.cityForecast.length != 0);\n        }\n      },\n      dependencies: [i3.CurrentComponent, i4.ForecastItemComponent],\n      styles: [\".forecast-form[_ngcontent-%COMP%]{display:flex;width:100%;padding:50px 0;justify-content:center;align-items:center}.forecast-form__input[_ngcontent-%COMP%]{display:inline-block;width:auto;vertical-align:middle;height:34px;padding:6px 12px;background-color:#fff;background-image:none;border:1px solid #d26c22;border-radius:4px;box-shadow:inset 0 1px 1px #00000013;transition:border-color .15s ease-in-out,box-shadow .15s ease-in-out;margin-right:10px}.forecast-form__btn[_ngcontent-%COMP%]{display:inline-block;margin-bottom:0;font-weight:400;text-align:center;vertical-align:middle;cursor:pointer;background-image:none;white-space:nowrap;padding:6px 12px;font-size:14px;line-height:1.42857143;border-radius:4px;-webkit-user-select:none;user-select:none;color:#fff!important;transition:background-color .3s,border-color .3s;background-color:#d26c22;border-color:#c1631f;text-transform:uppercase}.forecast-form__btn[_ngcontent-%COMP%]:hover{background-color:#c1631f;border-color:#9e511a}.container[_ngcontent-%COMP%]{padding-bottom:50px}.sort-btn[_ngcontent-%COMP%]{display:inline-block;margin:20px 10px;font-weight:400;text-align:center;vertical-align:middle;cursor:pointer;background-image:none;white-space:nowrap;padding:6px 12px;font-size:14px;line-height:1.42857143;border-radius:4px;-webkit-user-select:none;user-select:none;color:#fff!important;transition:background-color .3s,border-color .3s;background-color:#d26c22;border-color:#c1631f;text-transform:uppercase}.sort-btn[_ngcontent-%COMP%]:hover{background-color:#c1631f;border-color:#9e511a}\"]\n    });\n  }\n  return ForecastComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}